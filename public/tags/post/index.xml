<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on xtring&#39;s dev blog</title>
    <link>http://localhost:1313/tags/post/</link>
    <description>Recent content in Post on xtring&#39;s dev blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>도커란 무엇인가?</title>
      <link>http://localhost:1313/blog/what-is-docker/</link>
      <pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/what-is-docker/</guid>
      <description>&lt;h2 id=&#34;section-1-도커란-무엇인가&#34;&gt;Section 1) 도커란 무엇인가?&lt;/h2&gt;&#xA;&lt;h3 id=&#34;도커의-정체&#34;&gt;도커의 정체&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;도커를 잘 모르면 &amp;ldquo;편리해 보이지만, 뭔지 잘 모르겠다&amp;quot;는 이미지를 가지고 있다.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&amp;lsquo;도커&amp;rsquo; 개발 초기에는 BE를 중심으로 개발환경에서 사용됐으나, 지금은 운영 환경은 물론이고 FE의 개발환경에도 널리 도입되었다. -&amp;gt; 이제는 많은 곳에서 도커가 사용중이다.&lt;/p&gt;&#xA;&lt;h4 id=&#34;도커는-데이터-또는-프로그램을-격리시키는-기능을-제공한다&#34;&gt;도커는 &amp;lsquo;데이터 또는 프로그램을 격리시키는&amp;rsquo; 기능을 제공한다&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;주로 서버에서 이용하기도 하지만 클라이언트 컴퓨터에서도 사용됨&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;도커&lt;/code&gt;는 &lt;strong&gt;다양한 프로그램(소프트웨어)과 데이터를 각각 독립된 환경에 격리하는 기능&lt;/strong&gt;을 제공&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;컨테이너와-도커-엔진&#34;&gt;컨테이너와 도커 엔진&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;컨테이너&lt;/code&gt;: 서버 환경을 &amp;lsquo;조립형 창고&amp;rsquo;와 같이 분할시킨 공간&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;도커&lt;/code&gt;: 컨테이너를 다루는 기능을 다루는 기능을 제공하는 소프트웨어&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;도커 엔진&lt;/code&gt;: 도커를 사용하기 위한 소프트웨어 본체, 컨테이너를 생성하고 구동시키는 역할&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;컨테이너를-만들려면-이미지가-필요함&#34;&gt;컨테이너를 만들려면 이미지가 필요함&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;컨테이너&lt;/code&gt;를 만들기 위해서는 &lt;code&gt;이미지&lt;/code&gt;와 &lt;code&gt;도커 엔진&lt;/code&gt;이 필요&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;이미지&lt;/code&gt;의 종류는 다양&#xA;&lt;ul&gt;&#xA;&lt;li&gt;아파치 컨테이너 만들기 -&amp;gt; 아파치 이미지 사용&lt;/li&gt;&#xA;&lt;li&gt;MySQL 컨테이너 만들기 -&amp;gt; MySQL 이미지 사용&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;하나의 이미지로 여러개의 컨테이너를 생성할 수 있음&#xA;&lt;ul&gt;&#xA;&lt;li&gt;용량이 허용하는한 하나의 도커에서 여러 개의 컨테이너 생성 가능&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;도커는-리눅스-컴퓨터에서-사용&#34;&gt;도커는 리눅스 컴퓨터에서 사용&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;도커를 사용하기 위한 제약 사항&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;리눅스 운영체제&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;윈도우나 macOS에서도 도커를 구동할 수는 있지만, 이 경우 내부적(?)으로 리눅스가 사용됨&lt;/li&gt;&#xA;&lt;li&gt;&amp;lsquo;컨테이너에서 동작시킬 프로그램도 리눅스용 프로그램&amp;rsquo;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;도커가 리눅스 운영체제에서 사용하는 것을 전제로 만들짐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;데이터나-프로그램을-독립된-환경에-격리해야하는-이유&#34;&gt;데이터나 프로그램을 독립된 환경에 격리해야하는 이유&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;데이터나 프로그램을 독립된 환경에 격리해야하는 이유?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Axios instance interceptor 메서드 알아보기</title>
      <link>http://localhost:1313/blog/axios-instance-interceptor-method/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/axios-instance-interceptor-method/</guid>
      <description>&lt;h1 id=&#34;axios-instance-interceptor-메서드-알아보기&#34;&gt;Axios instance interceptor 메서드 알아보기&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Create on: 2025.04.14&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;배경&#34;&gt;배경&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thefarmersfront/la-cms-front-react/pull/5530/files&#34;&gt;지수님의 La-CMS 운영 이슈 해결사항&lt;/a&gt;을 확인 중 &lt;a href=&#34;https://axios-http.com/kr/docs/intro&#34;&gt;axios&lt;/a&gt;의 instance 메서드를 확인해보게 되었다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;axiosinterceptor&#34;&gt;axios.interceptor&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; 에서 인스턴스를 사용하면, 요청(req) 혹은 응답(res)이 실제 네트워크 통신을 거치기 전후에 원하는 ㅇ로직을 삽입하여 처리할 수 있다. 일반적으로 아래의 상황에서 사용된다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;공통적인 헤더, 토큰, 인증 정보를 요청에 추가할 때&lt;/li&gt;&#xA;&lt;li&gt;API 응답 형식을 통일하여 에러 처리를 자동화할 때&lt;/li&gt;&#xA;&lt;li&gt;응답을 가공하여 애플리케이션 상태에 반영할 때&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;예시&#34;&gt;예시&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;axios&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 1. axios 인스턴스 생성&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apiClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.com/api&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// 다른 설정들...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 요청(Request) 인터셉터 설정&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apiClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;interceptors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 요청 직전 공통적으로 처리할 로직&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 예: 요청 헤더에 토큰 추가&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;localStorage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accessToken&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Authorization&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`Bearer &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 요청 에러가 발생했을 때 처리할 로직&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Promise.&lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 3. 응답(Response) 인터셉터 설정&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apiClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;interceptors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 응답 데이터를 가공하거나&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 상태코드에 따라 처리할 로직&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 응답 에러가 발생했을 때 처리할 로직&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;401&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 예: 인증 에러 처리&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 로그인 페이지로 리다이렉트 또는 토큰 갱신 요청&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Promise.&lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 이제 apiClient를 사용해서 요청을 보냄&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apiClient&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interceptorsrequestuseonfulfilled-onrejected&#34;&gt;interceptors.request.use(onFulfilled, onRejected)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;onFulfilled&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;요청이 전송되기 &lt;em&gt;직전&lt;/em&gt; 에 실행됩니다.&lt;/li&gt;&#xA;&lt;li&gt;config 객체를 반환하면, 이 config 정보가 실제 서버로 전송됩니다.&lt;/li&gt;&#xA;&lt;li&gt;예: 토큰 추가, 공통 헤더 설정, 요청 파라미터 가공 등.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;onRejected&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;요청 과정에서 에러가 발생했을 때 실행됩니다.&lt;/li&gt;&#xA;&lt;li&gt;예: 요청을 보내기 전에 필수 토큰이 없을 경우 에러 처리.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;interceptorsresponseuseonfulfilled-onrejected&#34;&gt;interceptors.response.use(onFulfilled, onRejected)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;onFulfilled&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;서버로부터 정상적으로 응답이 온 후(HTTP 상태 코드 2xx) 실행됩니다.&lt;/li&gt;&#xA;&lt;li&gt;응답 데이터를 가공하거나, 로그용으로 추가 정보를 처리할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;onRejected&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;응답 과정에서 에러가 발생(HTTP 상태 코드 4xx, 5xx 등)했을 때 실행됩니다.&lt;/li&gt;&#xA;&lt;li&gt;에러 메시지 안내, 재시도 로직, 토큰 갱신 등을 처리할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;인터셉터의-체인-구조&#34;&gt;인터셉터의 체인 구조&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Axios는 요청 → 응답 과정에서 onFulfilled/onRejected 함수를 체인 형태로 순차 실행합니다.&lt;/li&gt;&#xA;&lt;li&gt;이 말은 여러 개의 인터셉터를 등록할 수 있으며, 순서대로 실행된다는 뜻입니다.&lt;/li&gt;&#xA;&lt;li&gt;요청 시에는 &lt;strong&gt;등록 순서대로&lt;/strong&gt; 실행되고, 응답 시에는 &lt;strong&gt;역순&lt;/strong&gt;으로 실행됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Axios instance interceptor 메서드 알아보기</title>
      <link>http://localhost:1313/blog/template/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/template/</guid>
      <description></description>
    </item>
  </channel>
</rss>
