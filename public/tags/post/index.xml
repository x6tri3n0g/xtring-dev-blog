<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Post on My New Hugo Site</title><link>https://example.org/tags/post/</link><description>Recent content in Post on My New Hugo Site</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://example.org/tags/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Axios instance interceptor 메서드 알아보기</title><link>https://example.org/blog/fe/axios-instance-interceptor-method/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><guid>https://example.org/blog/fe/axios-instance-interceptor-method/</guid><description>&lt;h1 id="axios-instance-interceptor-메서드-알아보기">Axios instance interceptor 메서드 알아보기&lt;/h1>
&lt;blockquote>
&lt;p>Create on: 2025.04.14&lt;/p>&lt;/blockquote>
&lt;h2 id="배경">배경&lt;/h2>
&lt;p>&lt;a href="https://github.com/thefarmersfront/la-cms-front-react/pull/5530/files">지수님의 La-CMS 운영 이슈 해결사항&lt;/a>을 확인 중 &lt;a href="https://axios-http.com/kr/docs/intro">axios&lt;/a>의 instance 메서드를 확인해보게 되었다.&lt;/p>
&lt;h2 id="axiosinterceptor">axios.interceptor&lt;/h2>
&lt;p>&lt;code>axios&lt;/code> 에서 인스턴스를 사용하면, 요청(req) 혹은 응답(res)이 실제 네트워크 통신을 거치기 전후에 원하는 ㅇ로직을 삽입하여 처리할 수 있다. 일반적으로 아래의 상황에서 사용된다.&lt;/p>
&lt;ul>
&lt;li>공통적인 헤더, 토큰, 인증 정보를 요청에 추가할 때&lt;/li>
&lt;li>API 응답 형식을 통일하여 에러 처리를 자동화할 때&lt;/li>
&lt;li>응답을 가공하여 애플리케이션 상태에 반영할 때&lt;/li>
&lt;/ul>
&lt;h3 id="예시">예시&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">axios&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;axios&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 1. axios 인스턴스 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">apiClient&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">axios&lt;/span>.&lt;span style="color:#a6e22e">create&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">baseURL&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://example.com/api&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// 다른 설정들...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2. 요청(Request) 인터셉터 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">apiClient&lt;/span>.&lt;span style="color:#a6e22e">interceptors&lt;/span>.&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">config&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 요청 직전 공통적으로 처리할 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 예: 요청 헤더에 토큰 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">localStorage&lt;/span>.&lt;span style="color:#a6e22e">getItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;accessToken&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">token&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">headers&lt;/span>.&lt;span style="color:#a6e22e">Authorization&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`Bearer &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">token&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 요청 에러가 발생했을 때 처리할 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Promise.&lt;span style="color:#a6e22e">reject&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 3. 응답(Response) 인터셉터 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">apiClient&lt;/span>.&lt;span style="color:#a6e22e">interceptors&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">response&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 응답 데이터를 가공하거나
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 상태코드에 따라 처리할 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 응답 에러가 발생했을 때 처리할 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#ae81ff">401&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 예: 인증 에러 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 로그인 페이지로 리다이렉트 또는 토큰 갱신 요청
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Promise.&lt;span style="color:#a6e22e">reject&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 이제 apiClient를 사용해서 요청을 보냄
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">apiClient&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/users&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">response&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>((&lt;span style="color:#a6e22e">error&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="interceptorsrequestuseonfulfilled-onrejected">interceptors.request.use(onFulfilled, onRejected)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>onFulfilled&lt;/strong>
&lt;ul>
&lt;li>요청이 전송되기 &lt;em>직전&lt;/em> 에 실행됩니다.&lt;/li>
&lt;li>config 객체를 반환하면, 이 config 정보가 실제 서버로 전송됩니다.&lt;/li>
&lt;li>예: 토큰 추가, 공통 헤더 설정, 요청 파라미터 가공 등.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>onRejected&lt;/strong>
&lt;ul>
&lt;li>요청 과정에서 에러가 발생했을 때 실행됩니다.&lt;/li>
&lt;li>예: 요청을 보내기 전에 필수 토큰이 없을 경우 에러 처리.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="interceptorsresponseuseonfulfilled-onrejected">interceptors.response.use(onFulfilled, onRejected)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>onFulfilled&lt;/strong>
&lt;ul>
&lt;li>서버로부터 정상적으로 응답이 온 후(HTTP 상태 코드 2xx) 실행됩니다.&lt;/li>
&lt;li>응답 데이터를 가공하거나, 로그용으로 추가 정보를 처리할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>onRejected&lt;/strong>
&lt;ul>
&lt;li>응답 과정에서 에러가 발생(HTTP 상태 코드 4xx, 5xx 등)했을 때 실행됩니다.&lt;/li>
&lt;li>에러 메시지 안내, 재시도 로직, 토큰 갱신 등을 처리할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="인터셉터의-체인-구조">인터셉터의 체인 구조&lt;/h3>
&lt;ul>
&lt;li>Axios는 요청 → 응답 과정에서 onFulfilled/onRejected 함수를 체인 형태로 순차 실행합니다.&lt;/li>
&lt;li>이 말은 여러 개의 인터셉터를 등록할 수 있으며, 순서대로 실행된다는 뜻입니다.&lt;/li>
&lt;li>요청 시에는 &lt;strong>등록 순서대로&lt;/strong> 실행되고, 응답 시에는 &lt;strong>역순&lt;/strong>으로 실행됩니다.&lt;/li>
&lt;/ul></description></item></channel></rss>