<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on xtring&#39;s dev blog</title>
    <link>https://xtring-dev-blog.pages.dev/blog/</link>
    <description>Recent content in Blogs on xtring&#39;s dev blog</description>
    <generator>Hugo</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 21 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xtring-dev-blog.pages.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2. 도커의 동작 원리</title>
      <link>https://xtring-dev-blog.pages.dev/blog/how-docker-works/</link>
      <pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://xtring-dev-blog.pages.dev/blog/how-docker-works/</guid>
      <description>&lt;h2 id=&#34;section-1-도커의-동작-원리&#34;&gt;Section 1) 도커의 동작 원리&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;도커의 동작 원리를 설명한다&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;도커의-구조&#34;&gt;도커의 구조&lt;/h3&gt;&#xA;&lt;p&gt;일반적인 서버라면 운영체제 위에 프로그램이나 데이터가 직접 올라가겠지만&#xA;도커를 사용하는 경우에는 &lt;strong&gt;운영체제 위에 도커 엔진이 동작하고 그 위에서 컨테이너가 동작&lt;/strong&gt;한다&#xA;-&amp;gt; 프로그램이나 데이터는 컨테이너 안에 위치한다.&#xA;그런데 데이터는 컨테이너 안, 밖에 위치하는 것이 있다. 뒤에서 설명&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;컨테이너가 운영되가 위한 구조&lt;/strong&gt;&#xA;[컨테이너1] | [컨테이너2] | [컨테이너3] | &amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[도커 엔진] - 도커 소프트웨어&lt;/li&gt;&#xA;&lt;li&gt;[리눅스 운영체제] - 서버 운영체제&lt;/li&gt;&#xA;&lt;li&gt;[서버 컴퓨터] - 물리 서버&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;컨테이너-안에서는-운영체제-비슷한-것이-들어있다&#34;&gt;컨테이너 안에서는 운영체제 &amp;lsquo;비슷한 것&amp;rsquo;이 들어있다&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;컨테이너 속은 어떤 구조로 돼 있을까?&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. 도커란 무엇인가?</title>
      <link>https://xtring-dev-blog.pages.dev/blog/what-is-docker/</link>
      <pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://xtring-dev-blog.pages.dev/blog/what-is-docker/</guid>
      <description>&lt;h2 id=&#34;section-1-도커란-무엇인가&#34;&gt;Section 1) 도커란 무엇인가?&lt;/h2&gt;&#xA;&lt;h3 id=&#34;도커의-정체&#34;&gt;도커의 정체&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;도커를 잘 모르면 &amp;ldquo;편리해 보이지만, 뭔지 잘 모르겠다&amp;quot;는 이미지를 가지고 있다.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&amp;lsquo;도커&amp;rsquo; 개발 초기에는 BE를 중심으로 개발환경에서 사용됐으나, 지금은 운영 환경은 물론이고 FE의 개발환경에도 널리 도입되었다. -&amp;gt; 이제는 많은 곳에서 도커가 사용중이다.&lt;/p&gt;&#xA;&lt;h4 id=&#34;도커는-데이터-또는-프로그램을-격리시키는-기능을-제공한다&#34;&gt;도커는 &amp;lsquo;데이터 또는 프로그램을 격리시키는&amp;rsquo; 기능을 제공한다&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;주로 서버에서 이용하기도 하지만 클라이언트 컴퓨터에서도 사용됨&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;도커&lt;/code&gt;는 &lt;strong&gt;다양한 프로그램(소프트웨어)과 데이터를 각각 독립된 환경에 격리하는 기능&lt;/strong&gt;을 제공&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;컨테이너와-도커-엔진&#34;&gt;컨테이너와 도커 엔진&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;컨테이너&lt;/code&gt;: 서버 환경을 &amp;lsquo;조립형 창고&amp;rsquo;와 같이 분할시킨 공간&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;도커&lt;/code&gt;: 컨테이너를 다루는 기능을 다루는 기능을 제공하는 소프트웨어&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;도커 엔진&lt;/code&gt;: 도커를 사용하기 위한 소프트웨어 본체, 컨테이너를 생성하고 구동시키는 역할&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;컨테이너를-만들려면-이미지가-필요함&#34;&gt;컨테이너를 만들려면 이미지가 필요함&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;컨테이너&lt;/code&gt;를 만들기 위해서는 &lt;code&gt;이미지&lt;/code&gt;와 &lt;code&gt;도커 엔진&lt;/code&gt;이 필요&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;이미지&lt;/code&gt;의 종류는 다양&#xA;&lt;ul&gt;&#xA;&lt;li&gt;아파치 컨테이너 만들기 -&amp;gt; 아파치 이미지 사용&lt;/li&gt;&#xA;&lt;li&gt;MySQL 컨테이너 만들기 -&amp;gt; MySQL 이미지 사용&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;하나의 이미지로 여러개의 컨테이너를 생성할 수 있음&#xA;&lt;ul&gt;&#xA;&lt;li&gt;용량이 허용하는한 하나의 도커에서 여러 개의 컨테이너 생성 가능&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;도커는-리눅스-컴퓨터에서-사용&#34;&gt;도커는 리눅스 컴퓨터에서 사용&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;도커를 사용하기 위한 제약 사항&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;리눅스 운영체제&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;윈도우나 macOS에서도 도커를 구동할 수는 있지만, 이 경우 내부적(?)으로 리눅스가 사용됨&lt;/li&gt;&#xA;&lt;li&gt;&amp;lsquo;컨테이너에서 동작시킬 프로그램도 리눅스용 프로그램&amp;rsquo;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;도커가 리눅스 운영체제에서 사용하는 것을 전제로 만들짐&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;데이터나-프로그램을-독립된-환경에-격리해야하는-이유&#34;&gt;데이터나 프로그램을 독립된 환경에 격리해야하는 이유&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;데이터나 프로그램을 독립된 환경에 격리해야하는 이유?&lt;/p&gt;</description>
    </item>
    <item>
      <title>프로젝트의 첫 단추를 잘 끼우는 방법(for FE)</title>
      <link>https://xtring-dev-blog.pages.dev/blog/start-work/</link>
      <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://xtring-dev-blog.pages.dev/blog/start-work/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../blog-images/start-work-1.png&#34; alt=&#34;가짜바쁨vs진짜바쁨&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;0-개발을-시작하기-전에&#34;&gt;0. 개발을 시작하기 전에&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;킥오프 미팅을 통해 프로젝트에 착수합니다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;실무자 구성 확인&lt;/li&gt;&#xA;&lt;li&gt;러프한 기획 내용 검토&lt;/li&gt;&#xA;&lt;li&gt;대략적인 일정 산정&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;1-요구사항-이해하기&#34;&gt;1. 요구사항 이해하기&lt;/h1&gt;&#xA;&lt;p&gt;기획서 리뷰 미팅부터는 &lt;strong&gt;요구사항을 면밀히 분석&lt;/strong&gt;해야 합니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;기획서를 정독하고 기능(Feature)을 리스트업합니다.&lt;/li&gt;&#xA;&lt;li&gt;누락되었거나 논리적으로 맞지 않는 내용은 논의를 통해 정리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-체크리스트&#34;&gt;📋 체크리스트&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;필수 구현 기능 (MVP)&lt;/li&gt;&#xA;&lt;li&gt;기능 간 우선순위 (개발 순서)&lt;/li&gt;&#xA;&lt;li&gt;API 명세 및 데이터 흐름 (백엔드 협업 여부 포함)&lt;/li&gt;&#xA;&lt;li&gt;server-to-server 통신 여부 확인&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2-프로젝트-범위-파악하기&#34;&gt;2. 프로젝트 범위 파악하기&lt;/h1&gt;&#xA;&lt;p&gt;코드 베이스 상에서 &lt;strong&gt;작업 범위&lt;/strong&gt;를 명확히 파악합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>미팅에서 의제 항목마다 시간을 미리 배분하는 것의 중요성</title>
      <link>https://xtring-dev-blog.pages.dev/blog/the-importance-of-time-allocation-in-meetings/</link>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://xtring-dev-blog.pages.dev/blog/the-importance-of-time-allocation-in-meetings/</guid>
      <description>&lt;p&gt;@한기용, Greep&lt;/p&gt;&#xA;&lt;p&gt;유데미에는 &lt;code&gt;PAO&lt;/code&gt;라고 해서 모든 미팅에 다음 세 가지를 꼭 적으라고 했었다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Purpose&lt;/code&gt;: 미팅의 목적이 무엇인가?&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Agenda&lt;/code&gt;: 미팅에서 구체적으로 이야기할 아이템들이 무엇인가?&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Outcome&lt;/code&gt;: 미팅을 통해 결정하고 싶은 것이 무엇인가?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Outcome과 Purpose가 비슷한 부분이 있지만 Purpose는 조금더 배경과 컨텍스트에 관한 것이라면 Outcome은 더 구체적으로 뭘 결정할지에 관한 것이다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 여기에 한걸음 더 나간다면 Agenda에는 항목별로 시간 할당을 해야하는 것이 좋다. 예를 들어 &amp;ldquo;회식&amp;quot;이란 항목이 있다면 최대 5분 이렇게 미리 지정하고 가능하면 담당자 결정 이런 식으로 구체적으로 의제에 써주면 더 좋다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>5년차 FE 개발자가 되기까지 - 삶의 지도</title>
      <link>https://xtring-dev-blog.pages.dev/blog/before-5-years/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://xtring-dev-blog.pages.dev/blog/before-5-years/</guid>
      <description>&lt;h1 id=&#34;과거부터-현재까지&#34;&gt;과거부터 현재까지&lt;/h1&gt;&#xA;&lt;p&gt;돌이켜보면 생각하는 것을 현실로 만들어내는 것을 좋아해오고 있다.&lt;br&gt;&#xA;어릴적에는 노트에 게임을 만들거나 레고로 무언가를 만들고 과학 발명 경진대회에 나갔다.&lt;br&gt;&#xA;성인이 된 이후에 밴드를 통해 작곡을 하고 창업 동아리를 운영하기도 했다.&lt;br&gt;&#xA;개발자 1년차에 &amp;lsquo;내가 개발자를 할 수 있을까?&amp;rsquo; 싶었던 고민이 있었지만, 어릴적부터 했던 활동들이 개발자가 가져야 하는 기질과 비슷한 것들이었다고 생각했고 지금 와서는 잘 선택한 길이라고 생각한다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;성격은-계속해서-바뀌어-왔다&#34;&gt;성격은 계속해서 바뀌어 왔다&lt;/h2&gt;&#xA;&lt;p&gt;부모님의 사업으로 스무살 이전에만 두 지역에서 8번 이사했다.&lt;br&gt;&#xA;초등학교는 3번 전학을 다녔고 늘 새로운 친구들, 사람들을 만나고 적응하는데 애쓰기도 했다.&lt;br&gt;&#xA;때때로 한 지역에 오래 정착하지 못했던 아쉬움도 있지만 자주 바뀌는 환경에 적응하는 것을 자연스럽게 배우게 된 것 같아&lt;br&gt;&#xA;스무살이 넘어 혼자 타지역으로 대학에 가거나 부모님과의 완전 독립도 어려움 없이 해낼 수 있었던 것 같다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
